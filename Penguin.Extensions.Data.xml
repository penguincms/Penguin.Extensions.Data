<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Extensions.Data</name>
    </assembly>
    <members>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.ToCsv(System.Data.DataTable,System.String,Penguin.Extensions.Data.ToCsvSettings)">
            <summary>
            Writes a DataTable to a CSV file specified by the path
            </summary>
            <param name="dataTable">The datatable to write</param>
            <param name="filePath">The location of the CSV to create</param>
            <param name="settings">Optional csv settings</param>
        </member>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.ToCsvRow(System.Data.DataRow,System.Nullable{System.Char})">
            <summary>
            Creates a CSV row from the provided data row
            </summary>
            <param name="dr">The data row to convert</param>
            <param name="quoteCharacter">An optional character to use for quoting items</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.ToCsv(System.Data.DataTable,Penguin.Extensions.Data.ToCsvSettings)">
            <summary>
            Writes a datatable as a CSV string and returns the string
            </summary>
            <param name="dataTable">The data source</param>
            <returns>A CSV representation of the data table</returns>
            <param name="settings">Optional csv settings</param>
        </member>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.AddOrUpdate(System.Data.DataRow,System.String,System.Object)">
            <summary>
            Adds an item to the data row, adding the column if needed. 
            If the column exists, updates the existing value
            </summary>
            <param name="dr">The data row to update</param>
            <param name="column">The column to target</param>
            <param name="value">The value to add or update</param>
        </member>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.Add(System.Data.DataTable,System.Object)">
            <summary>
            Adds an object to the data table as a data row, and then returns the new row
            </summary>
            <param name="dt">The data table to target</param>
            <param name="toAdd">The object to add to the table</param>
            <returns>The newly created data row containing the object information</returns>
        </member>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.ContainsColumn(System.Data.DataTable,System.String,System.StringComparison)">
            <summary>
            Returns true if the data table contains the requested column
            </summary>
            <param name="dt">The data table to check</param>
            <param name="columnName">The column to check for</param>
            <param name="comparison">An optional string comparison to use when checking for the column name. Defaults to OrdinalIgnoreCase</param>
            <returns>True if a column with a matching name is found</returns>
        </member>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.Scaffold(System.Data.DataTable,System.Type)">
            <summary>
            Sets up a data table to have columns representative of properties found on a given type
            </summary>
            <param name="dt">The data table to scaffold</param>
            <param name="toScaffold">The type to use to create the columns on the table</param>
        </member>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.EnsureColumn(System.Data.DataTable,System.String,System.Type)">
            <summary>
            Creates a column on a table if it doesn't already exist
            </summary>
            <param name="dt">The data table to target</param>
            <param name="columnName">The name of the column to ensure</param>
            <param name="columnType">The type of the data contained in the column</param>
            <returns>True if the column already existed. False if it was created</returns>
        </member>
        <member name="M:Penguin.Extensions.Data.DataTableExtensions.ToHtmlTable(System.Data.DataTable)">
            <summary>
            Returns an HTML string table representation of a data table
            </summary>
            <param name="dt">The data table to convert</param>
            <returns>An HTML string table representation of a data table</returns>
        </member>
        <member name="M:Penguin.Extensions.Data.IEnumerableExtensions.ToDataTable(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts an IEnumerable of objects to a data table, with property names as headers and values as items
            </summary>
            <param name="objList">The IEnumerable of objects to use as a data source</param>
            <returns>A data table containing the object values</returns>
        </member>
        <member name="T:Penguin.Extensions.Data.ToCsvSettings">
            <summary>
            Settings to use when converting a DataTable to a CSV
            </summary>
        </member>
        <member name="P:Penguin.Extensions.Data.ToCsvSettings.IncludeHeaders">
            <summary>
            Serialize the headers to the first row of the file. Default true
            </summary>
        </member>
        <member name="P:Penguin.Extensions.Data.ToCsvSettings.QuoteCharacter">
            <summary>
            An optional character to use to quote items. defaults to "
            </summary>
        </member>
        <member name="P:Penguin.Extensions.Data.ToCsvSettings.Compression">
            <summary>
            Compression to use when writing CSV files. Default None.
            The output file will have the correct extension appended
            </summary>
        </member>
        <member name="M:Penguin.Extensions.Data.XNodeExtensions.GetAllChildrenByName(System.Xml.Linq.XNode,System.String)">
            <summary>
            Returns a list of all child nodes by name
            </summary>
            <param name="node">The node to search</param>
            <param name="childName">The child name to search for</param>
            <returns>All children matching the name</returns>
        </member>
        <member name="M:Penguin.Extensions.Data.XNodeExtensions.GetAllChildrenByName(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns a list of all child nodes by name
            </summary>
            <param name="node">The node to search</param>
            <param name="childName">The child name to search for</param>
            <returns>All children matching the name</returns>
        </member>
    </members>
</doc>
